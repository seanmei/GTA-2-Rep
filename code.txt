package com.mygdx.game;

import java.util.ArrayList;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;

public class GTAv2 extends ApplicationAdapter {
	public final double walkSpeed = 2;
	double moveSpeed;
	SpriteBatch batch;
	Sprite bul;
	Texture b1;
	
	int ox = 10;
	int oy = 10;
	int counter; 
	int direction =1;
	ArrayList<Bullet>bulletList;
	//using degrees , 90 = up. 0 = right. 270 = down . 180 = left 
	ArrayList<Sprite>spriteList;
	Texture tmp;
	Sprite sp;
	
	
	Person Jan = new Person(10,10,100);
	@Override
	public void create () {
		batch = new SpriteBatch();
		spriteList = new ArrayList<Sprite>();
		for(int i = 0; i < 5; i++){
			String link = i+".png"; 
			tmp = new Texture(link);
			sp = new Sprite(tmp);
			spriteList.add(sp);

		}
		b1= new Texture ("bul.png");
		bulletList = new ArrayList<Bullet>();
		moveSpeed = walkSpeed;

	}

	@Override
	public void render () {
		Gdx.gl.glClearColor(1, 0, 0, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		batch.begin();
		spriteList.get(0).rotate(180);
		for(int i = 0; i < 5; i++){
			spriteList.get(i).setRotation(180);
		}
		counter+=1;
		move();
		walk();
		bullets();
		batch.end();
		ox = Jan.x;
		oy = Jan.y;
	}
	public void move(){
		if(Gdx.input.isKeyPressed(Keys.LEFT)){
			Jan.moveL();
		}
		if(Gdx.input.isKeyPressed(Keys.RIGHT)){
			Jan.moveR();
		}
		if(Gdx.input.isKeyPressed(Keys.UP)){
			Jan.moveU();
		}
		if(Gdx.input.isKeyPressed(Keys.DOWN)){
			Jan.moveD();
		}
		if(Gdx.input.isKeyJustPressed(Keys.SPACE)){
			shoot();
		}
	}
	public void walk(){
		int pos = counter/15;
		spriteList.get(pos).setPosition(Jan.x,Jan.y);
		spriteList.get(0).setPosition(Jan.x,Jan.y);
		if(Gdx.input.isKeyPressed(Keys.RIGHT)){
			direction = 0;
			if(Gdx.input.isKeyPressed(Keys.UP)){
				direction += 45;
			}
			else if(Gdx.input.isKeyPressed(Keys.DOWN)){
				direction -= 45;
			}
			spriteList.get(pos).setRotation(direction);
			spriteList.get(pos).draw(batch);
		}
		else if(Gdx.input.isKeyPressed(Keys.LEFT)){
			direction = 180;
			if(Gdx.input.isKeyPressed(Keys.UP)){
				direction -= 45;
			}
			else if(Gdx.input.isKeyPressed(Keys.DOWN)){
				direction += 45;
			}
			spriteList.get(pos).setRotation(direction);
			spriteList.get(pos).draw(batch);
		}
		else if(Gdx.input.isKeyPressed(Keys.UP)){
			if(Gdx.input.isKeyPressed(Keys.RIGHT)){
				direction -= 45;
			}
			else if(Gdx.input.isKeyPressed(Keys.LEFT)){
				direction += 45;
			}
			direction = 90;
			spriteList.get(pos).setRotation(direction);
			spriteList.get(pos).draw(batch);
		}
		else if(Gdx.input.isKeyPressed(Keys.DOWN)){
			if(Gdx.input.isKeyPressed(Keys.LEFT)){
				direction -= 45;
			}
			else if(Gdx.input.isKeyPressed(Keys.RIGHT)){
				direction += 45;
			}
			direction = 270;
			spriteList.get(pos).setRotation(direction);
			spriteList.get(pos).draw(batch);
		}
		else{
			spriteList.get(0).setRotation(direction);
			spriteList.get(0).draw(batch);
		}
		counter = counter % 74;
	}
	
	public void bullets(){
		for(int i = 0; i < bulletList.size(); i++){
			bulletList.get(i).move();
			bulletList.get(i).pic.draw(batch);
		}
	}

	public void shoot(){
		Bullet tmp = new Bullet(Jan.x, Jan.y, direction, b1);
		bulletList.add(tmp);
		
	}
	
	@Override
	public void dispose () {
		batch.dispose();
	}
	
	class Person{
		int x;
		int y;
		int health;
		public Person(int px, int py, int n){ //constructor 
			x = px;
			y = py;
			health = n;
		}
		public void moveR(){
			x += moveSpeed;
		}
		public void moveL(){
			x -= moveSpeed;
		}
		public void moveD(){
			y -= moveSpeed;
		}
		public void moveU(){
			y += moveSpeed;
		}
	}
	class Bullet{
		int x, y, direction;
		Sprite pic;
		public Bullet(int bx, int by, int d, Texture p){
			x = bx;
			y = by;
			direction = d;
			pic = new Sprite(p);
			pic.setRotation(direction-90);
		}
		public void move(){
			x += (5*Math.cos(Math.toRadians(direction)));
			y += (5*Math.sin(Math.toRadians(direction)));
			pic.setPosition(x, y);
		}
	}
}
